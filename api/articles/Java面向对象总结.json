{"title":"Java面向对象总结","slug":"Java面向对象总结","date":"2019-10-13T08:21:40.000Z","updated":"2019-11-10T09:44:45.226Z","comments":true,"excerpt":"<p>Java 面向对象的理解与运用         详解</p>","content":"<p>Java 面向对象的理解与运用         详解</p>\n<a id=\"more\"></a>\n\n<h1 id=\"面向对象总结\"><a href=\"#面向对象总结\" class=\"headerlink\" title=\"面向对象总结\"></a>面向对象总结</h1><h3 id=\"第二章-类和对象\"><a href=\"#第二章-类和对象\" class=\"headerlink\" title=\"第二章  类和对象\"></a>第二章  类和对象</h3><h5 id=\"1-面向对象概念\"><a href=\"#1-面向对象概念\" class=\"headerlink\" title=\"1.面向对象概念\"></a>1.面向对象概念</h5><p>​        面向对象就是把一个项目、一个事情分成更小的项目，或者说更小的一部分，每一部分负责什么样的功能，最后再合成一个整体。</p>\n<h5 id=\"2-类的创建\"><a href=\"#2-类的创建\" class=\"headerlink\" title=\"2.类的创建\"></a>2.类的创建</h5><p>语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>File——&gt;new——&gt;class——-&gt;类名</p>\n<h5 id=\"3-创建对象\"><a href=\"#3-创建对象\" class=\"headerlink\" title=\"3.创建对象\"></a>3.创建对象</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 对象名=<span class=\"keyword\">new</span> 类名();</span><br><span class=\"line\">对象名.方法名();</span><br><span class=\"line\">对象名.属性</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-构造方法\"><a href=\"#4-构造方法\" class=\"headerlink\" title=\"4.构造方法\"></a>4.构造方法</h5><p>概念：方法名和类名相同，没有返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名()</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> 类名()&#123;&#125;<span class=\"comment\">//主要是做一些初始化操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-构造方法的重载\"><a href=\"#5-构造方法的重载\" class=\"headerlink\" title=\"5.构造方法的重载\"></a>5.构造方法的重载</h5><p>概念：在同一个类中，方法名相同，参数个数，顺序，类型不相同的构造方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> 类名()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> 类名(String name,<span class=\"keyword\">int</span> age)&#123;&#125;<span class=\"comment\">//构造方法的重载</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-构造方法的执行\"><a href=\"#6-构造方法的执行\" class=\"headerlink\" title=\"6.构造方法的执行\"></a>6.构造方法的执行</h5><p>new 类名——-&gt;执行子类的构造方法</p>\n<p>super 类名——-&gt;执行父类构造方法，在继承中可以用到</p>\n<h5 id=\"7-static静态修饰符\"><a href=\"#7-static静态修饰符\" class=\"headerlink\" title=\"7.static静态修饰符\"></a>7.static静态修饰符</h5><p>静态修饰符可以修饰属性，方法，代码块</p>\n<p>直接调用，不用new出来              类名.属性            类名.方法名</p>\n<h5 id=\"8-java内存（课外内容）\"><a href=\"#8-java内存（课外内容）\" class=\"headerlink\" title=\"8.java内存（课外内容）\"></a>8.java内存（课外内容）</h5><p>垃圾回收机制（gc机制）：当java内存满了的时候，gc机制会自动清理java内存中最下面的代码块，除了被static修饰的除外。</p>\n<h3 id=\"第三章-封装\"><a href=\"#第三章-封装\" class=\"headerlink\" title=\"第三章 封装\"></a>第三章 封装</h3><h5 id=\"1-封装的概念\"><a href=\"#1-封装的概念\" class=\"headerlink\" title=\"1.封装的概念\"></a>1.封装的概念</h5><p>把对象的属性和方法结合成一个独立的整体，隐藏实现细节，并提供对外访问的接口。</p>\n<h5 id=\"2-封装的步骤\"><a href=\"#2-封装的步骤\" class=\"headerlink\" title=\"2.封装的步骤\"></a>2.封装的步骤</h5><p>（1）把属性私有化，用private来修饰</p>\n<p>（2）对属性使用get和set方法</p>\n<p>（3）调用并处理这些方法</p>\n<h5 id=\"3-封装的作用\"><a href=\"#3-封装的作用\" class=\"headerlink\" title=\"3.封装的作用\"></a>3.封装的作用</h5><p>避免一些因为人们的失误操作而引发的一些合乎常理的操作。</p>\n<h5 id=\"4-封装的优点\"><a href=\"#4-封装的优点\" class=\"headerlink\" title=\"4.封装的优点\"></a>4.封装的优点</h5><p>（1）隐藏实现细节</p>\n<p>（2）安全性</p>\n<p>（3）增加代码的复用性</p>\n<p>（4）模块化</p>\n<h5 id=\"5-修饰符\"><a href=\"#5-修饰符\" class=\"headerlink\" title=\"5.修饰符\"></a>5.修饰符</h5><p>public——&gt;公共的：在一个项目中都可以访问，权限最高</p>\n<p>private—–&gt;私有的：只能在本类中访问，权限最低</p>\n<p>protected—&gt;安全的，受保护的：同一个包能访问，继承中子类可以访问父类</p>\n<p>default——&gt;默认的：同一个包能访问</p>\n<h3 id=\"第四章-继承\"><a href=\"#第四章-继承\" class=\"headerlink\" title=\"第四章  继承\"></a>第四章  继承</h3><h5 id=\"1-继承的概念\"><a href=\"#1-继承的概念\" class=\"headerlink\" title=\"1.继承的概念\"></a>1.继承的概念</h5><p>从已知的一个类中派生出一个新的类，叫子类。子类实现了父类所有非私有化的属性和方法，并根据实际需求扩展出新的行为。</p>\n<h5 id=\"2-继承的关键字\"><a href=\"#2-继承的关键字\" class=\"headerlink\" title=\"2.继承的关键字\"></a>2.继承的关键字</h5><p>extends</p>\n<h5 id=\"3-继承的语法\"><a href=\"#3-继承的语法\" class=\"headerlink\" title=\"3.继承的语法\"></a>3.继承的语法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名 <span class=\"keyword\">extends</span> 父类</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-继承的优点\"><a href=\"#4-继承的优点\" class=\"headerlink\" title=\"4.继承的优点\"></a>4.继承的优点</h5><p>（1）继承是传递的，易于在其基础上构造和扩充。</p>\n<p>（2）简化对事物的描绘，使得层次更加清晰。</p>\n<p>（3）减少代码冗余。</p>\n<p>（4）提高可维护性。</p>\n<h5 id=\"5-在子类中的使用\"><a href=\"#5-在子类中的使用\" class=\"headerlink\" title=\"5.在子类中的使用\"></a>5.在子类中的使用</h5><p>子类可以调用父类的非私有属性和方法</p>\n<p>super.方法        super.属性</p>\n<p>父类的构造方法必须在子类构造方法的第一行代码中调用</p>\n<h5 id=\"6-重写\"><a href=\"#6-重写\" class=\"headerlink\" title=\"6.重写\"></a>6.重写</h5><p>基于继承的基础上</p>\n<p>方法名一致，参数个数，顺序，类型全部一致，只有代码块不同</p>\n<h3 id=\"第五章-多态\"><a href=\"#第五章-多态\" class=\"headerlink\" title=\"第五章 多态\"></a>第五章 多态</h3><h5 id=\"1-多态的概念\"><a href=\"#1-多态的概念\" class=\"headerlink\" title=\"1.多态的概念\"></a>1.多态的概念</h5><p>多个不同的对象对同一消息作出响应。同一消息根据不同的对象而采用各种不同的方法。</p>\n<h5 id=\"2-多态的必要条件\"><a href=\"#2-多态的必要条件\" class=\"headerlink\" title=\"2.多态的必要条件\"></a>2.多态的必要条件</h5><p>（1）继承</p>\n<p>（2）重写</p>\n<p>（3）父类指向子类对象（向上转型）</p>\n<h5 id=\"3-多态的使用\"><a href=\"#3-多态的使用\" class=\"headerlink\" title=\"3.多态的使用\"></a>3.多态的使用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cooking</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \t\t\t\tSystem.out.println(<span class=\"string\">\"米饭\"</span>);</span><br><span class=\"line\">  \t\t\t&#125;</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  \t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">  \t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cooking</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \t\t\t\tSystem.out.println(<span class=\"string\">\"熬粥\"</span>);</span><br><span class=\"line\">  \t\t\t&#125;</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"> \t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> \t\t\t\tFather son=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\"> \t\t\t\tson.cooking();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-多态的好处\"><a href=\"#4-多态的好处\" class=\"headerlink\" title=\"4.多态的好处\"></a>4.多态的好处</h5><p>利于代码的扩展</p>\n<h5 id=\"5-向下转型\"><a href=\"#5-向下转型\" class=\"headerlink\" title=\"5.向下转型\"></a>5.向下转型</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Son son=(Son)father;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第六章-抽象\"><a href=\"#第六章-抽象\" class=\"headerlink\" title=\"第六章  抽象\"></a>第六章  抽象</h3><h5 id=\"1-抽象的概念\"><a href=\"#1-抽象的概念\" class=\"headerlink\" title=\"1.抽象的概念\"></a>1.抽象的概念</h5><p>将现实生活中的事物，抽离共同特征，形成我们需要的对象。</p>\n<h5 id=\"2-抽象的关键字\"><a href=\"#2-抽象的关键字\" class=\"headerlink\" title=\"2.抽象的关键字\"></a>2.抽象的关键字</h5><p>abstact</p>\n<p>可以修饰类也可以修饰方法</p>\n<h5 id=\"3-抽象的用法\"><a href=\"#3-抽象的用法\" class=\"headerlink\" title=\"3.抽象的用法\"></a>3.抽象的用法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> 类名</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//抽象方法没有方法体</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> 方法名();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当父类是抽象类的时候，子类必须重写父类中所有的抽象方法</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-final修饰符：最终的\"><a href=\"#4-final修饰符：最终的\" class=\"headerlink\" title=\"4.final修饰符：最终的\"></a>4.final修饰符：最终的</h5><p>修饰变量方法和类</p>\n<p>（1）当修饰变量时，变量转化为常量，常量的值不能改变</p>\n<p>​        例如：final int a=18；不能改变a的值，而且必须给a一个初始值</p>\n<p>（2）当修饰方法时，该方法不能被重写</p>\n<p>（3）当修饰类时，该类不能被继承</p>\n<h3 id=\"第七章-接口\"><a href=\"#第七章-接口\" class=\"headerlink\" title=\"第七章 接口\"></a>第七章 接口</h3><h5 id=\"1-接口的概念\"><a href=\"#1-接口的概念\" class=\"headerlink\" title=\"1.接口的概念\"></a>1.接口的概念</h5><p>java中的接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为(功能)。</p>\n<h5 id=\"2-接口的关键字\"><a href=\"#2-接口的关键字\" class=\"headerlink\" title=\"2.接口的关键字\"></a>2.接口的关键字</h5><p>interface</p>\n<h5 id=\"3-接口的语法\"><a href=\"#3-接口的语法\" class=\"headerlink\" title=\"3.接口的语法\"></a>3.接口的语法</h5><p>实现接口的关键字：implement</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> 接口名</span>&#123;</span><br><span class=\"line\"> * \t\t\t<span class=\"comment\">//接口是纯抽象类</span></span><br><span class=\"line\"> * \t\t\t<span class=\"comment\">//接口里面的方法都是抽象方法</span></span><br><span class=\"line\"> * \t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> * \t\t&#125;</span><br><span class=\"line\"> * \t\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Play</span> <span class=\"keyword\">implements</span> 接口名</span>&#123;</span><br><span class=\"line\"> * \t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\"> * \t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> * \t\t\t&#125;</span><br><span class=\"line\"> *\t\t&#125;</span><br><span class=\"line\"> * \t\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"> * \t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> * \t\t\t\tPlay play=<span class=\"keyword\">new</span> Play();</span><br><span class=\"line\"> * \t\t\t\tplay.setData();</span><br><span class=\"line\"> * \t\t\t&#125;</span><br><span class=\"line\"> * \t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意接口可以进行多继承</p>\n<p>public interface 接口名 extends 接口名，接口名{}</p>\n<p>一般用法</p>\n<p>public class 类名 extends 父类 implements 接口，接口{}</p>\n<h5 id=\"第八章-集合框架\"><a href=\"#第八章-集合框架\" class=\"headerlink\" title=\"第八章 集合框架\"></a>第八章 集合框架</h5><h5 id=\"1-ArrayList\"><a href=\"#1-ArrayList\" class=\"headerlink\" title=\"1.ArrayList\"></a>1.ArrayList</h5><p>ArrayList list=new ArrayList();</p>\n<p>list.add();//添加数据</p>\n<p>list.get();//获取数据</p>\n<h5 id=\"2-Map\"><a href=\"#2-Map\" class=\"headerlink\" title=\"2.Map\"></a>2.Map</h5><p>Map map=new HasMap();</p>\n<p>map.put(key,value);//key不能重复</p>\n<p>map.get(key);//获取key对象的value</p>\n<h5 id=\"3-泛型\"><a href=\"#3-泛型\" class=\"headerlink\" title=\"3.泛型\"></a>3.泛型</h5><p>ArrayList<string> list=new ArrayList&gt;<string>();</string></string></p>\n<p>Map&lt;String,String&gt; map=new HasMap&lt;String,String&gt;();</p>\n<p>ArrayList&lt;Map&lt;String,String&gt;&gt; list=new ArrayList&gt;&lt;Map&lt;String,String&gt;&gt;();</p>\n","thumbnail":"/img/Java面向对象总结/mxdx.jpg","primarycolor":"blueGrey","accentcolor":"blueGrey","categories":[],"tags":[{"name":"一giao我哩giao","path":"api/tags/一giao我哩giao.json"}]}